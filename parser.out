Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGN
    BOOL
    BREAK
    COLON
    COMMA
    COMMENT_MONOLINE
    DIFF
    DIVIDEEQUALS
    ELIF
    ELSE
    EQUALS
    EXCLAMATION
    FALSE
    FLOAT
    FOR
    GREATERTHAN
    GREATERTHANOREQUAL
    IF
    INTERROGATION
    LBRACE
    LESSTHAN
    LESSTHANOREQUAL
    MINUSEQUALS
    MOD
    NAME
    OR
    PRINT
    RBRACE
    READ
    RETURN
    SEMICOLON
    STRING
    SUMEQUALS
    TIMESEQUALS
    TRUE
    WHILE
    WRITE

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS term
Rule 2     expression -> expression MINUS term
Rule 3     expression -> term
Rule 4     term -> term TIMES factor
Rule 5     term -> term DIVIDE factor
Rule 6     term -> factor
Rule 7     factor -> INT
Rule 8     factor -> LPAREN expression RPAREN
Rule 9     arbitro_de_video -> VAR
Rule 10    arbitro_de_video -> VAR LCOLC expression RCOLC

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 
BOOL                 : 
BREAK                : 
COLON                : 
COMMA                : 
COMMENT_MONOLINE     : 
DIFF                 : 
DIVIDE               : 5
DIVIDEEQUALS         : 
ELIF                 : 
ELSE                 : 
EQUALS               : 
EXCLAMATION          : 
FALSE                : 
FLOAT                : 
FOR                  : 
GREATERTHAN          : 
GREATERTHANOREQUAL   : 
IF                   : 
INT                  : 7
INTERROGATION        : 
LBRACE               : 
LCOLC                : 10
LESSTHAN             : 
LESSTHANOREQUAL      : 
LPAREN               : 8
MINUS                : 2
MINUSEQUALS          : 
MOD                  : 
NAME                 : 
OR                   : 
PLUS                 : 1
PRINT                : 
RBRACE               : 
RCOLC                : 10
READ                 : 
RETURN               : 
RPAREN               : 8
SEMICOLON            : 
STRING               : 
SUMEQUALS            : 
TIMES                : 4
TIMESEQUALS          : 
TRUE                 : 
VAR                  : 9 10
WHILE                : 
WRITE                : 
error                : 

Nonterminals, with rules where they appear

arbitro_de_video     : 
expression           : 1 2 8 10 0
factor               : 4 5 6
term                 : 1 2 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . INT
    (8) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 4
    LPAREN          shift and go to state 5

    expression                     shift and go to state 1
    term                           shift and go to state 2
    factor                         shift and go to state 3

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    PLUS            shift and go to state 6
    MINUS           shift and go to state 7


state 2

    (3) expression -> term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 3 (expression -> term .)
    MINUS           reduce using rule 3 (expression -> term .)
    $end            reduce using rule 3 (expression -> term .)
    RPAREN          reduce using rule 3 (expression -> term .)
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9


state 3

    (6) term -> factor .

    TIMES           reduce using rule 6 (term -> factor .)
    DIVIDE          reduce using rule 6 (term -> factor .)
    PLUS            reduce using rule 6 (term -> factor .)
    MINUS           reduce using rule 6 (term -> factor .)
    $end            reduce using rule 6 (term -> factor .)
    RPAREN          reduce using rule 6 (term -> factor .)


state 4

    (7) factor -> INT .

    TIMES           reduce using rule 7 (factor -> INT .)
    DIVIDE          reduce using rule 7 (factor -> INT .)
    PLUS            reduce using rule 7 (factor -> INT .)
    MINUS           reduce using rule 7 (factor -> INT .)
    $end            reduce using rule 7 (factor -> INT .)
    RPAREN          reduce using rule 7 (factor -> INT .)


state 5

    (8) factor -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . INT
    (8) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 4
    LPAREN          shift and go to state 5

    expression                     shift and go to state 10
    term                           shift and go to state 2
    factor                         shift and go to state 3

state 6

    (1) expression -> expression PLUS . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . INT
    (8) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 4
    LPAREN          shift and go to state 5

    term                           shift and go to state 11
    factor                         shift and go to state 3

state 7

    (2) expression -> expression MINUS . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . INT
    (8) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 4
    LPAREN          shift and go to state 5

    term                           shift and go to state 12
    factor                         shift and go to state 3

state 8

    (4) term -> term TIMES . factor
    (7) factor -> . INT
    (8) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 4
    LPAREN          shift and go to state 5

    factor                         shift and go to state 13

state 9

    (5) term -> term DIVIDE . factor
    (7) factor -> . INT
    (8) factor -> . LPAREN expression RPAREN

    INT             shift and go to state 4
    LPAREN          shift and go to state 5

    factor                         shift and go to state 14

state 10

    (8) factor -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term

    RPAREN          shift and go to state 15
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7


state 11

    (1) expression -> expression PLUS term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 1 (expression -> expression PLUS term .)
    MINUS           reduce using rule 1 (expression -> expression PLUS term .)
    $end            reduce using rule 1 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS term .)
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9


state 12

    (2) expression -> expression MINUS term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

    PLUS            reduce using rule 2 (expression -> expression MINUS term .)
    MINUS           reduce using rule 2 (expression -> expression MINUS term .)
    $end            reduce using rule 2 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS term .)
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9


state 13

    (4) term -> term TIMES factor .

    TIMES           reduce using rule 4 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 4 (term -> term TIMES factor .)
    PLUS            reduce using rule 4 (term -> term TIMES factor .)
    MINUS           reduce using rule 4 (term -> term TIMES factor .)
    $end            reduce using rule 4 (term -> term TIMES factor .)
    RPAREN          reduce using rule 4 (term -> term TIMES factor .)


state 14

    (5) term -> term DIVIDE factor .

    TIMES           reduce using rule 5 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 5 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 5 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 5 (term -> term DIVIDE factor .)
    $end            reduce using rule 5 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 5 (term -> term DIVIDE factor .)


state 15

    (8) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 8 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 8 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 8 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 8 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 8 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 8 (factor -> LPAREN expression RPAREN .)

